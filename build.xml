<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="V1GIT">
    <!-- Compiler settings -->
    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.max.memory" value="128m"/>
    <property name="compiler.args" value=""/>

    <property name="ver.major" value="9"/>
    <property name="ver.minor" value="0"/>
    <property name="ver.build" value="0"/>
    <property name="publish.dir" value="./publish"/>
    <property name="build.version" value="${ver.major}.${ver.minor}.${ver.build}"/>
    <property name="jar.filename" value="V1GitIntegration.jar"/>
    <property name="zip.filename" value="V1GitIntegration.${build.version}.zip"/>
    <property name="zip.source.filename" value="V1GitIntegration.Source.${build.version}.zip"/>
    <property name="wrapper.licence.filename" value="LICENSE.txt"/>

    <!-- Directories -->
    <property name="base.dir" value="."/>
    <property name="service.dir" value="service"/>
    <property name="doc.dir" value="${basedir}/doc"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="res.dir" value="${basedir}/resources"/>    
    <property name="distr.dir" value="${basedir}/distr"/>
    <property name="tests.dir" value="${basedir}/tests"/>
    <property name="servicewrapper.dir" value="${basedir}/ServiceWrapper"/>


    <!-- Build Directories -->
    <property name="build.dir" value="${basedir}/build"/>
    <property name="bin.product.dir" value="${build.dir}/bin_production"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="publish.git.dir" value="${publish.dir}/tmpl/GitIntegration"/>

    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    <patternset id="compiler.resources">
        <include name="**/?*.properties"/>
        <include name="**/?*.xml"/>
        <include name="**/?*.gif"/>
        <include name="**/?*.png"/>
        <include name="**/?*.jpeg"/>
        <include name="**/?*.jpg"/>
        <include name="**/?*.html"/>
        <include name="**/?*.dtd"/>
        <include name="**/?*.tld"/>
    </patternset>

    <!-- Clean -->
    <target name="compile.clean">
        <delete dir="${bin.product.dir}"/>
        <delete dir="${build.dir}"/>
    </target>

    <target name="build.clean">
        <delete file="${build.dir}/${jar.filename}"/>
    </target>

    <target name="package.clean">
        <delete dir="${distr.dir}"/>
        <delete file="${zip.filename}"/>
        <delete file="${zip.source.filename}"/>
        <delete dir="${junit.output.dir}"/>
        <delete dir="." includes="cobertura.ser"/>
    </target>

    <target name="clean"
        depends="compile.clean, package.clean, build.clean, coverage.clean"
        description="cleanup all"/>

    <!-- Compile -->
    <target name="integration.compile.git" description="Compile VersionOne integration for Git">
        <mkdir dir="${bin.product.dir}"/>
        <javac destdir="${bin.product.dir}" debug="${compiler.debug}"
            nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}"
            fork="true" includeantruntime="false">
            <compilerarg line="${compiler.args}"/>
            <classpath refid="classpath"/>

            <src path="${tests.dir}"/>
            <src path="${src.dir}"/>
            <src path="${res.dir}"/>
        </javac>

    </target>

    <path id="base.classpath">
        <fileset dir="${lib.dir}" includes="*.jar">
            <exclude name="junit-4.4.jar"/>
            <exclude name="hamcrest-core-1.1.jar" />
            <exclude name="hamcrest-library-1.1.jar" />
            <exclude name="jmock-2.5.1.jar" />
            <exclude name="jmock-junit4-2.5.1.jar" />
        </fileset>
    </path>
    <pathconvert property="manifest.classpath" pathsep=" ">
      <path refid="base.classpath"/>
      <mapper>
        <chainedmapper>
           <flattenmapper/>
           <globmapper from="*.jar" to="lib/*.jar"/>
        </chainedmapper>
      </mapper>
    </pathconvert>


    <!-- Jar creation -->
    <target name="integration.build.git" depends="integration.compile.git">
        <mkdir dir="${distr.dir}"/>

        <copy todir="${bin.product.dir}/">
            <fileset dir="${res.dir}/">
                <include name="**/*.*"/>
            </fileset>
        </copy>
        <copy file="${base.dir}/log4j.properties"
            tofile="${bin.product.dir}/log4j.properties"/>
        <jar destfile="${distr.dir}/${jar.filename}" duplicate="preserve">
            <zipfileset dir="${bin.product.dir}" prefix=""/>
            <manifest>
                <attribute name="BuiltBy" value="VersionOne"/>
                <attribute name="Main-Class" value="com.versionone.git.Main"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="BuildVersion" value="${build.version}"/>
                <attribute name="BuildRev" value="${ver.build}"/>
                <attribute name="Class-Path" value="${manifest.classpath}"/>
            </manifest>
        </jar>
    </target>

    <!-- package -->
    <target name="integration.package.git" depends="integration.build.git">
        <mkdir dir="${publish.git.dir}"/>

        <copy file="${distr.dir}/${jar.filename}" todir="${publish.git.dir}"/>
        <!-- copy configuration -->
        <copy file="${base.dir}/configuration.xml" todir="${publish.git.dir}"/>
        <!-- copy runner -->
        <copy file="${base.dir}/RunGitIntegration.bat" todir="${publish.git.dir}"/>

		<copy file="License.rtf" todir="${publish.git.dir}"/>
		
        <!-- copy service wrapper-->
        <copy todir="${publish.git.dir}">
            <fileset dir="${servicewrapper.dir}/">
                <exclude name="${wrapper.licence.filename}"/>
            </fileset>
        </copy>
        <copy file="${servicewrapper.dir}/${wrapper.licence.filename}" todir="${publish.git.dir}/${service.dir}/"/>

        <!-- copy libraries -->
        <copy todir="${publish.git.dir}/lib">
            <fileset dir="${lib.dir}/">
                <exclude name="${lib.dir}/junit-4.4.jar"/>
            </fileset>
        </copy>

        <!-- copy docs -->
        <copy todir="${publish.git.dir}/doc">
            <fileset dir="${doc.dir}"/>
        </copy>
		
        <zip destfile="${publish.dir}/${zip.filename}">
            <fileset dir="${publish.dir}/tmpl/"/>
        </zip>
        <delete dir="${publish.dir}/tmpl"/>

		<zip destfile="${publish.dir}/${zip.source.filename}">
			<fileset dir="${base.dir}">
				<include name="build.xml"/>
				<include name="resources/**/*"/>
				<include name="src/**/*"/>
                <include name="ServiceWrapper/**/*"/>
				<include name="tests/**/*"/>
				<include name="lib/**/*"/>
                <include name="configuration.xml"/>
                <include name="log4j.properties"/>
                <include name="License.rtf"/>
                <include name="RunGitIntegration.bat"/>
				<include name="doc/**/*"/>
			</fileset>
		</zip>
    </target>

    <!-- covarage -->
    <target name="coverage.clean">
    </target>

    <target name="testing" depends="integration.compile.git">
        <mkdir dir="${junit.output.dir}"/>
        <!-- copy test data for tests -->
        <copy todir="${bin.product.dir}/">
            <fileset dir="${tests.dir}/">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
        <junit fork="true" printsummary="withOutAndErr">
            <classpath>
                <pathelement location="${bin.product.dir}"/>
                <path refid="classpath"/>
            </classpath>
            <formatter type="xml"/>

            <batchtest fork="yes" todir="${junit.output.dir}">
                <fileset dir="${bin.product.dir}">
                    <include name="**/*Tester.class"/>
                </fileset>
            </batchtest>
        </junit>

    </target>


    <target name="teamcity.build" depends="clean, testing, integration.package.git"
        description="build all"/>


</project>
